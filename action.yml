name: TestChimp Test Runner
description: 'Enhanced TestChimp GitHub Action with AI-powered test repair and configurable success criteria'
branding:
  icon: 'activity'
  color: 'purple'
inputs:
  api-key:
    description: 'TestChimp project API key (required for CI/CD authentication)'
    required: true
  
  project-id:
    description: 'TestChimp project ID (required for CI/CD authentication)'
    required: true
  
  testchimp-endpoint:
    description: 'TestChimp API endpoint (optional)'
    required: false
    default: 'https://featureservice.testchimp.io'
  
  test-type:
    description: 'Type of test to run (FS_TEST for API tests, UI_TEST for UI tests)'
    required: true
  
  test-case-regex:
    description: 'Regex pattern to filter test cases (optional)'
    required: false
    default: '.*'
  
  test-suite-regex:
    description: 'Regex pattern to filter test suites (optional)'
    required: false
    default: '.*'
  
  test-directory:
    description: 'Directory containing test files (relative to repository root). For monorepos, use comma-separated directories (e.g., "ui/tests,api/tests")'
    required: false
    default: 'tests'
  
  log-level:
    description: 'Log output level (all, failures, none)'
    required: false
    default: 'all'
  
  success-criteria:
    description: 'Test success criteria (ORIGINAL_SUCCESS or REPAIR_SUCCESS_WITH_CONFIDENCE)'
    required: false
    default: 'ORIGINAL_SUCCESS'
  
  repair-confidence-threshold:
    description: 'Minimum confidence score required for repair success (1-5)'
    required: false
    default: '4'
  
  create-pr-on-repair:
    description: 'Create a pull request with repaired test files (true/false)'
    required: false
    default: 'false'
  
  pr-title:
    description: 'Title for the pull request (optional)'
    required: false
    default: 'TestChimp: AI-repaired test files'
  
  pr-body:
    description: 'Body for the pull request (optional)'
    required: false
    default: 'This PR contains test files that were automatically repaired by TestChimp AI.'
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Run TestChimp Action
      run: |
        # Pass all GitHub Actions environment variables to ts-node
        export GITHUB_ACTIONS=true
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_REPOSITORY="${{ github.repository }}"
        export GITHUB_REF="${{ github.ref }}"
        export GITHUB_SHA="${{ github.sha }}"
        export GITHUB_HEAD_REF="${{ github.head_ref }}"
        export GITHUB_BASE_REF="${{ github.base_ref }}"
        export GITHUB_EVENT_NAME="${{ github.event_name }}"
        export GITHUB_WORKSPACE="${{ github.workspace }}"
        export GITHUB_ACTION_PATH="${{ github.action_path }}"
        
        # Pass all input variables
        export INPUT_API_KEY="${{ inputs.api-key }}"
        export INPUT_PROJECT_ID="${{ inputs.project-id }}"
        export INPUT_TESTCHIMP_ENDPOINT="${{ inputs.testchimp-endpoint }}"
        export INPUT_TEST_TYPE="${{ inputs.test-type }}"
        export INPUT_TEST_CASE_REGEX="${{ inputs.test-case-regex }}"
        export INPUT_TEST_SUITE_REGEX="${{ inputs.test-suite-regex }}"
        export INPUT_TEST_DIRECTORY="${{ inputs.test-directory }}"
        export INPUT_RECURSIVE="${{ inputs.recursive }}"
        export INPUT_INCLUDE_PATTERN="${{ inputs.include-pattern }}"
        export INPUT_EXCLUDE_PATTERN="${{ inputs.exclude-pattern }}"
        export INPUT_MODE="${{ inputs.mode }}"
        export INPUT_DEFLAKE_RUNS="${{ inputs.deflake-runs }}"
        export INPUT_HEADLESS="${{ inputs.headless }}"
        export INPUT_SUCCESS_CRITERIA="${{ inputs.success-criteria }}"
        export INPUT_REPAIR_CONFIDENCE_THRESHOLD="${{ inputs.repair-confidence-threshold }}"
        export INPUT_CREATE_PR_ON_REPAIR="${{ inputs.create-pr-on-repair }}"
        export INPUT_PR_TITLE="${{ inputs.pr-title }}"
        export INPUT_PR_BODY="${{ inputs.pr-body }}"
        
        # Pass environment variables
        export TESTCHIMP_ENV="${{ env.TESTCHIMP_ENV }}"
        export NODE_ENV="${{ env.NODE_ENV }}"
        
        # Run the action
        npx ts-node src/index.ts
      shell: bash
      working-directory: ${{ github.action_path }}
outputs:
  status:
    description: 'Overall execution status'
  test-count:
    description: 'Number of tests executed'
  success-count:
    description: 'Number of successful tests'
  failure-count:
    description: 'Number of failed tests'
  repaired-count:
    description: 'Number of tests that were repaired'
  repaired-above-threshold:
    description: 'Number of tests repaired with confidence above threshold'
  repaired-below-threshold:
    description: 'Number of tests repaired with confidence below threshold'
  success-criteria-used:
    description: 'Success criteria that was applied (ORIGINAL_SUCCESS or REPAIR_SUCCESS_WITH_CONFIDENCE)'
