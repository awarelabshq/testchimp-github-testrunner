name: TestChimp Test Runner
description: 'Enhanced TestChimp GitHub Action with AI-powered test repair and configurable success criteria'
branding:
  icon: 'activity'
  color: 'purple'
inputs:
  api-key:
    description: 'TestChimp project API key (required for CI/CD authentication)'
    required: true
  
  project-id:
    description: 'TestChimp project ID (required for CI/CD authentication)'
    required: true
  
  
  test-directory:
    description: 'Directory containing test files (relative to repository root). Use comma-separated directories to list multiple (e.g., "ui/tests,api/tests")'
    required: false
    default: 'tests'
  
  log-level:
    description: 'Log output level (all, failures, none)'
    required: false
    default: 'all'
  
  success-criteria:
    description: 'Test success criteria (ORIGINAL_SUCCESS or REPAIR_SUCCESS_WITH_CONFIDENCE)'
    required: false
    default: 'ORIGINAL_SUCCESS'
  
  repair-confidence-threshold:
    description: 'Minimum confidence score required for repair success (1-5)'
    required: false
    default: '4'
  
  attempt-ai-repair:
    description: 'Attempt AI repair on failed tests (true/false)'
    required: false
    default: 'true'
  
  include-pattern:
    description: 'Glob pattern for test files to include'
    required: false
    default: '**/*.spec.{js,ts}'
  
  exclude-pattern:
    description: 'Glob pattern for files/directories to exclude'
    required: false
    default: '**/node_modules/**'
  
  mode:
    description: 'Test execution mode (RUN_EXACTLY, RUN_WITH_AI_REPAIR)'
    required: false
    default: 'RUN_WITH_AI_REPAIR'
  
  deflake-runs:
    description: 'Number of times to run flaky tests to deflake them'
    required: false
    default: '2'
  
  testchimp-env:
    description: 'TestChimp environment (staging or prod)'
    required: false
    default: 'prod'
  
  
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        rm -rf node_modules package-lock.json
        npm install
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Build action
      run: npm run build
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Get installed Playwright version
      id: playwright-version
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['playwright'].version)")" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Run TestChimp Action
      id: testchimp
      run: |
        # Pass all GitHub Actions environment variables to ts-node
        export GITHUB_ACTIONS=true
        export GITHUB_WORKFLOW="${{ github.workflow }}"
        export GITHUB_REPOSITORY="${{ github.repository }}"
        export GITHUB_REF="${{ github.ref }}"
        export GITHUB_SHA="${{ github.sha }}"
        export GITHUB_HEAD_REF="${{ github.head_ref }}"
        export GITHUB_BASE_REF="${{ github.base_ref }}"
        export GITHUB_EVENT_NAME="${{ github.event_name }}"
        export GITHUB_WORKSPACE="${{ github.workspace }}"
        export GITHUB_ACTION_PATH="${{ github.action_path }}"
        
        # Pass all input variables
        export INPUT_API_KEY="${{ inputs.api-key }}"
        export INPUT_PROJECT_ID="${{ inputs.project-id }}"
        export INPUT_TEST_DIRECTORY="${{ inputs.test-directory }}"
        export INPUT_INCLUDE_PATTERN="${{ inputs.include-pattern }}"
        export INPUT_EXCLUDE_PATTERN="${{ inputs.exclude-pattern }}"
        export INPUT_MODE="${{ inputs.mode }}"
        export INPUT_DEFLAKE_RUNS="${{ inputs.deflake-runs }}"
        export INPUT_SUCCESS_CRITERIA="${{ inputs.success-criteria }}"
        export INPUT_REPAIR_CONFIDENCE_THRESHOLD="${{ inputs.repair-confidence-threshold }}"
        export INPUT_ATTEMPT_AI_REPAIR="${{ inputs.attempt-ai-repair }}"
        export INPUT_TESTCHIMP_ENV="${{ inputs.testchimp-env }}"
        
        # Pass environment variables
        export TESTCHIMP_ENV="${{ inputs.testchimp-env || env.TESTCHIMP_ENV }}"
        export NODE_ENV="${{ env.NODE_ENV }}"
        
        # Run the action and set outputs (from action directory where dependencies are installed)
        cd ${{ github.action_path }}
        node dist/index.js
        
        # Change to repository directory for git operations
        cd ${{ github.workspace }}
        
        # Set outputs from JSON file
        if [ -f "testchimp-outputs.json" ]; then
          STATUS=$(jq -r '.status' testchimp-outputs.json)
          TEST_COUNT=$(jq -r '.testCount' testchimp-outputs.json)
          SUCCESS_COUNT=$(jq -r '.successCount' testchimp-outputs.json)
          FAILURE_COUNT=$(jq -r '.failureCount' testchimp-outputs.json)
          REPAIRED_COUNT=$(jq -r '.repairedCount' testchimp-outputs.json)
          REPAIRED_ABOVE_THRESHOLD=$(jq -r '.repairedAboveThreshold' testchimp-outputs.json)
          REPAIRED_BELOW_THRESHOLD=$(jq -r '.repairedBelowThreshold' testchimp-outputs.json)
          SUCCESS_CRITERIA_USED=$(jq -r '.successCriteriaUsed' testchimp-outputs.json)
          
          echo "status=${STATUS}" >> $GITHUB_OUTPUT
          echo "test-count=${TEST_COUNT}" >> $GITHUB_OUTPUT
          echo "success-count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          echo "failure-count=${FAILURE_COUNT}" >> $GITHUB_OUTPUT
          echo "repaired-count=${REPAIRED_COUNT}" >> $GITHUB_OUTPUT
          echo "repaired-above-threshold=${REPAIRED_ABOVE_THRESHOLD}" >> $GITHUB_OUTPUT
          echo "repaired-below-threshold=${REPAIRED_BELOW_THRESHOLD}" >> $GITHUB_OUTPUT
          echo "success-criteria-used=${SUCCESS_CRITERIA_USED}" >> $GITHUB_OUTPUT
        fi
      shell: bash
outputs:
  status:
    description: 'Overall execution status'
    value: ${{ steps.testchimp.outputs.status }}
  test-count:
    description: 'Number of tests executed'
    value: ${{ steps.testchimp.outputs.test-count }}
  success-count:
    description: 'Number of successful tests'
    value: ${{ steps.testchimp.outputs.success-count }}
  failure-count:
    description: 'Number of failed tests'
    value: ${{ steps.testchimp.outputs.failure-count }}
  repaired-count:
    description: 'Number of tests that were repaired'
    value: ${{ steps.testchimp.outputs.repaired-count }}
  repaired-above-threshold:
    description: 'Number of tests repaired with confidence above threshold'
    value: ${{ steps.testchimp.outputs.repaired-above-threshold }}
  repaired-below-threshold:
    description: 'Number of tests repaired with confidence below threshold'
    value: ${{ steps.testchimp.outputs.repaired-below-threshold }}
  success-criteria-used:
    description: 'Success criteria that was applied (ORIGINAL_SUCCESS or REPAIR_SUCCESS_WITH_CONFIDENCE)'
    value: ${{ steps.testchimp.outputs.success-criteria-used }}
